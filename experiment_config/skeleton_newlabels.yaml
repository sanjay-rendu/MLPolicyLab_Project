experiment_name: skeleton2
owner: bills3_group

inputs:
  sql_loc_bill: "/data/groups/bills3/mlpp_project_home/experiment_config/latestLabels.sql"
  sql_bill_text: "/data/groups/bills3/mlpp_project_home/experiment_config/bill_texts.sql"

outputs:
  metrics_lr_model3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_metrics.txt"
  metrics_base3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/base_metrics.txt"
  metrics_commonsense3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/commonsense_metrics.txt"
  saved_models1: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_files.txt"
  metrics_lr_model1: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_grid_metrics.txt"

graph:
  - node_name: fetch_labeled_data
    inputs: sql_loc_bill
    outputs: bill_data
    operation: data_io.fetch_sql

  - node_name: fetch_bill_text
    inputs: sql_bill_text
    outputs: bill_text
    operation: data_io.fetch_sql
    
  - node_name: monthly_snapshots
    inputs: fetch_labeled_data.bill_data
    outputs: monthly_bill_data
    operation: data_clean.monthly_row_selector
     

## set 1: train [2009-01-01, 2010-01-01); test [2010-01-01 + 180 days, 2011-07-01) ##
  - node_name: split1
    inputs: monthly_snapshots.monthly_bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2010-01-01'
      validation_end_date: '2011-07-01'

## set 2: train [2009-01-01, 2012-01-01); test [2012-01-01 + 180 days, 2013-07-01) ##
  - node_name: split2
    inputs: monthly_snapshots.monthly_bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2012-01-01'
      validation_end_date: '2013-07-01'

## set 3: train [2009-01-01, 2014-01-01); test [2014-01-01 + 180 days, 2015-07-01) ##
  - node_name: split3
    inputs: monthly_snapshots.monthly_bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2014-01-01'
      validation_end_date: '2015-07-01'

  - node_name: bill_text3
    inputs: [split3.train, split3.val]
    outputs: [train, val]
    operation: data_io.textSplit

  - node_name: lda_model3
    inputs: bill_text3.train
    outputs: [vectorizer, lda_model]
    operation: feature_eng.get_lda_model

  - node_name: feature_eng_train3
    inputs: [split3.train, bill_text3.train, lda_model3.vectorizer, lda_model3.lda_model]
    outputs: df
    operation: feature_eng.topic_model

  - node_name: feature_eng_val3
    inputs: [split3.val, bill_text3.val, lda_model3.vectorizer, lda_model3.lda_model]
    outputs: df
    operation: feature_eng.topic_model

  - node_name: baseline3
    inputs: split3.val
    outputs: [baserate, commonsense]
    operation: evaluate.baseline

  - node_name: select3
    inputs: [feature_eng_train3.df, feature_eng_val3.df]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label',
                          'topic_0', 'topic_1', 'topic_2', 'topic_3', 'topic_4', 'topic_5',
                          'topic_6', 'topic_7', 'topic_8', 'topic_9']
  - node_name: model_logistic_regression3
    inputs: select3.fil_train
    outputs: model
    operation: model.logistic_regression_trainer
    arguments:
      target: label
      max_iter: 200


  ## set 4: train [2009-01-01, 2016-01-01); test [2016-01-01 + 180 days, 2017-07-01) ##
  - node_name: split4
    inputs: monthly_snapshots.monthly_bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2016-01-01'
      validation_end_date: '2017-07-01'

  - node_name: select_grid1
    inputs: [split1.train, split1.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: select_grid2
    inputs: [split2.train, split2.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']
  
  - node_name: select_grid3
    inputs: [split3.train, split3.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: select_grid4
    inputs: [split4.train, split4.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: model_grid1
    inputs: select_grid1.fil_train
    outputs: num_models
    operation: model.model_grid
    arguments:
      target: label
      split: 1
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
      model_specs: [
        # {
        #   'model_name': 'sklearn.linear_model.LogisticRegression',
        #   'params_list': [
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 2.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 2.0},
        #   ]
        # },
        {
          'model_name': 'sklearn.ensemble.RandomForestClassifier',
          'params_list': [
            # {'n_estimators': 100, 'min_samples_split': 2},
            # {'n_estimators': 100, 'min_samples_split': 4},
            # {'n_estimators': 100, 'min_samples_split': 8},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 2},
            # {'n_estimators': 500, 'min_samples_split': 4},
            # {'n_estimators': 500, 'min_samples_split': 8},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 2},
            # {'n_estimators': 1000, 'min_samples_split': 4},
            # {'n_estimators': 1000, 'min_samples_split': 8},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 2},
            {'n_estimators': 2000, 'min_samples_split': 4},
            {'n_estimators': 2000, 'min_samples_split': 8},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 2},
            {'n_estimators': 5000, 'min_samples_split': 4},
            {'n_estimators': 5000, 'min_samples_split': 8},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 2},
            {'n_estimators': 10000, 'min_samples_split': 4},
            {'n_estimators': 10000, 'min_samples_split': 8},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 20},
          ]
        },
        # {
        #   'model_name': 'sklearn.svm.SVC',
        #   'params_list': [
        #     {'kernel': 'rbf', 'C': 5.0},
        #   ]
        # },
      ]

  - node_name: model_grid2
    inputs: select_grid2.fil_train
    outputs: num_models
    operation: model.model_grid
    arguments:
      target: label
      split: 2
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
      model_specs: [
        # {
        #   'model_name': 'sklearn.linear_model.LogisticRegression',
        #   'params_list': [
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 2.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 2.0},
        #   ]
        # },
        {
          'model_name': 'sklearn.ensemble.RandomForestClassifier',
          'params_list': [
            # {'n_estimators': 100, 'min_samples_split': 2},
            # {'n_estimators': 100, 'min_samples_split': 4},
            # {'n_estimators': 100, 'min_samples_split': 8},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 2},
            # {'n_estimators': 500, 'min_samples_split': 4},
            # {'n_estimators': 500, 'min_samples_split': 8},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 2},
            # {'n_estimators': 1000, 'min_samples_split': 4},
            # {'n_estimators': 1000, 'min_samples_split': 8},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 2},
            {'n_estimators': 2000, 'min_samples_split': 4},
            {'n_estimators': 2000, 'min_samples_split': 8},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 2},
            {'n_estimators': 5000, 'min_samples_split': 4},
            {'n_estimators': 5000, 'min_samples_split': 8},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 2},
            {'n_estimators': 10000, 'min_samples_split': 4},
            {'n_estimators': 10000, 'min_samples_split': 8},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 20},
          ]
        },
        # {
        #   'model_name': 'sklearn.svm.SVC',
        #   'params_list': [
        #     {'kernel': 'rbf', 'C': 5.0},
        #   ]
        # },
      ]

  - node_name: model_grid3
    inputs: select_grid3.fil_train
    outputs: num_models
    operation: model.model_grid
    arguments:
      target: label
      split: 3
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
      model_specs: [
        # {
        #   'model_name': 'sklearn.linear_model.LogisticRegression',
        #   'params_list': [
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 2.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 2.0},
        #   ]
        # },
        {
          'model_name': 'sklearn.ensemble.RandomForestClassifier',
          'params_list': [
            # {'n_estimators': 100, 'min_samples_split': 2},
            # {'n_estimators': 100, 'min_samples_split': 4},
            # {'n_estimators': 100, 'min_samples_split': 8},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 2},
            # {'n_estimators': 500, 'min_samples_split': 4},
            # {'n_estimators': 500, 'min_samples_split': 8},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 2},
            # {'n_estimators': 1000, 'min_samples_split': 4},
            # {'n_estimators': 1000, 'min_samples_split': 8},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 2},
            {'n_estimators': 2000, 'min_samples_split': 4},
            {'n_estimators': 2000, 'min_samples_split': 8},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 2},
            {'n_estimators': 5000, 'min_samples_split': 4},
            {'n_estimators': 5000, 'min_samples_split': 8},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 2},
            {'n_estimators': 10000, 'min_samples_split': 4},
            {'n_estimators': 10000, 'min_samples_split': 8},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 20},
          ]
        },
        # {
        #   'model_name': 'sklearn.svm.SVC',
        #   'params_list': [
        #     {'kernel': 'rbf', 'C': 5.0},
        #   ]
        # },
      ]
  
  - node_name: model_grid4
    inputs: select_grid4.fil_train
    outputs: num_models
    operation: model.model_grid
    arguments:
      target: label
      split: 4
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
      model_specs: [
        # {
        #   'model_name': 'sklearn.linear_model.LogisticRegression',
        #   'params_list': [
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l1', 'C': 2.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.01},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.05},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.1},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.2},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 0.5},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 1.0},
        #     {'max_iter': 200, 'penalty': 'l2', 'C': 2.0},
        #   ]
        # },
        {
          'model_name': 'sklearn.ensemble.RandomForestClassifier',
          'params_list': [
            # {'n_estimators': 100, 'min_samples_split': 2},
            # {'n_estimators': 100, 'min_samples_split': 4},
            # {'n_estimators': 100, 'min_samples_split': 8},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 100, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 100, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 2},
            # {'n_estimators': 500, 'min_samples_split': 4},
            # {'n_estimators': 500, 'min_samples_split': 8},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 500, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 500, 'min_samples_split': 8, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 2},
            # {'n_estimators': 1000, 'min_samples_split': 4},
            # {'n_estimators': 1000, 'min_samples_split': 8},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 5},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 10},
            # {'n_estimators': 1000, 'min_samples_split': 2, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 4, 'max_depth': 20},
            # {'n_estimators': 1000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 2},
            {'n_estimators': 2000, 'min_samples_split': 4},
            {'n_estimators': 2000, 'min_samples_split': 8},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 2000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 2000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 2},
            {'n_estimators': 5000, 'min_samples_split': 4},
            {'n_estimators': 5000, 'min_samples_split': 8},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 5000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 5000, 'min_samples_split': 8, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 2},
            {'n_estimators': 10000, 'min_samples_split': 4},
            {'n_estimators': 10000, 'min_samples_split': 8},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 5},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 10},
            {'n_estimators': 10000, 'min_samples_split': 2, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 4, 'max_depth': 20},
            {'n_estimators': 10000, 'min_samples_split': 8, 'max_depth': 20},
          ]
        },
        # {
        #   'model_name': 'sklearn.svm.SVC',
        #   'params_list': [
        #     {'kernel': 'rbf', 'C': 5.0},
        #   ]
        # },
      ]

  - node_name: metric_grid
    inputs: [select_grid1.fil_val, select_grid2.fil_val, select_grid3.fil_val, select_grid4.fil_val, model_grid4.num_models]
    outputs: result_grid
    operation: evaluate.topk_metric_grid
    arguments:
        target: label
        save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"

  - node_name: validate3
    inputs: [select3.fil_val, model_logistic_regression3.model]
    outputs: val_output
    operation: evaluate.predict_val
    arguments:
      target: label

  - node_name: topk_model3
    inputs: validate3.val_output
    outputs: [metrics_lr_model3, model_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/lr_model3.png

  - node_name: topk_baserate3
    inputs: baseline3.baserate
    outputs: [metrics_base3, base_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/base3.png

  - node_name: topk_commonsense3
    inputs: baseline3.commonsense
    outputs: [metrics_commonsense3, commonsense_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/commonsense3.png

  # - node_name: load_model_1
  #   inputs: select_grid4.fil_train
  #   outputs: model
  #   operation: evaluate.load_model
  #   arguments:
  #     model_path: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_split_4_10.joblib

  # - node_name: load_model_2
  #   inputs: select_grid4.fil_train
  #   outputs: model
  #   operation: evaluate.load_model
  #   arguments:
  #     model_path: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_split_4_17.joblib

  - node_name: choose_best_models
    inputs: metric_grid.result_grid
    outputs: [model1, model2]
    operation: evaluate.choose_best_two
    arguments:
      split: 4
      save_path: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/

  - node_name: validate_model_1
    inputs: [select_grid4.fil_val, choose_best_models.model1]
    outputs: val_output
    operation: evaluate.predict_val
    arguments:
      target: label

  - node_name: validate_model_2
    inputs: [select_grid4.fil_val, choose_best_models.model2]
    outputs: val_output
    operation: evaluate.predict_val
    arguments:
      target: label

  - node_name: topk_model_1
    inputs: validate_model_1.val_output
    outputs: [metrics_lr_model_1, model_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/lr_model_1.png

  - node_name: topk_model_2
    inputs: validate_model_2.val_output
    outputs: [metrics_lr_model_2, model_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/lr_model_2.png

  - node_name: baseline4
    inputs: split4.val
    outputs: [baserate, commonsense]
    operation: evaluate.baseline

  - node_name: topk_baserate4
    inputs: baseline4.baserate
    outputs: [metrics_base4, base_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/base4.png

  - node_name: topk_commonsense4
    inputs: baseline4.commonsense
    outputs: [metrics_commonsense4, commonsense_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/commonsense4.png

