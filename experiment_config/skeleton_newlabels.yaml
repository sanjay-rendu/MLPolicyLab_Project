experiment_name: skeleton2
owner: bills3_group

inputs:
  sql_loc_bill: "/data/groups/bills3/mlpp_project_home/experiment_config/latestLabels.sql"
  sql_bill_text: "/data/groups/bills3/mlpp_project_home/experiment_config/bill_texts.sql"

outputs:
  metrics_lr_model3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_metrics.txt"
  metrics_base3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/base_metrics.txt"
  metrics_commonsense3: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/commonsense_metrics.txt"
  saved_models1: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_files.txt"
  metrics_lr_model1: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/model_grid_metrics.txt"

graph:
  - node_name: fetch_labeled_data
    inputs: sql_loc_bill
    outputs: bill_data
    operation: data_io.fetch_sql

  - node_name: fetch_bill_text
    inputs: sql_bill_text
    outputs: bill_text
    operation: data_io.fetch_sql

## set 1: train [2009-01-01, 2010-01-01); test [2010-01-01 + 180 days, 2011-07-01) ##
  - node_name: split1
    inputs: fetch_labeled_data.bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2010-01-01'
      validation_end_date: '2011-07-01'

## set 2: train [2009-01-01, 2012-01-01); test [2012-01-01 + 180 days, 2013-07-01) ##
  - node_name: split2
    inputs: fetch_labeled_data.bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2012-01-01'
      validation_end_date: '2013-07-01'

## set 3: train [2009-01-01, 2014-01-01); test [2014-01-01 + 180 days, 2015-07-01) ##
  - node_name: split3
    inputs: fetch_labeled_data.bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2014-01-01'
      validation_end_date: '2015-07-01'

## set 4: train [2009-01-01, 2016-01-01); test [2016-01-01 + 180 days, 2017-07-01) ##
  - node_name: split4
    inputs: fetch_labeled_data.bill_data
    outputs: [train, val]
    operation: split.timeSplit
    arguments:
      prediction_date: '2016-01-01'
      validation_end_date: '2017-07-01'

  - node_name: lda_model3
    inputs: [split3.train, fetch_bill_text.bill_text]
    outputs: [vectorizer, lda_model]
    operation: feature_eng.get_lda_model

  - node_name: feature_eng_train3
    inputs: [split3.train, fetch_bill_text.bill_text, lda_model3.vectorizer, lda_model3.lda_model]
    outputs: [df]
    operation: feature_eng.topic_model

  - node_name: feature_eng_val3
    inputs: [split3.val, fetch_bill_text.bill_text, lda_model3.vectorizer, lda_model3.lda_model]
    outputs: [df]
    operation: feature_eng.topic_model

  - node_name: baseline3
    inputs: split3.val
    outputs: [baserate, commonsense]
    operation: evaluate.baseline

  - node_name: select3
    inputs: [feature_eng_train3.df, feature_eng_val3.df]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label',
                          'topic_0', 'topic_1', 'topic_2', 'topic_3', 'topic_4', 'topic_5',
                          'topic_6', 'topic_7', 'topic_8', 'topic_9'] 
  - node_name: model_logistic_regression3
    inputs: select3.fil_train
    outputs: model
    operation: model.logistic_regression_trainer
    arguments:
      target: label
      max_iter: 200

  - node_name: select_grid1
    inputs: [split1.train, split1.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: select_grid2
    inputs: [split2.train, split2.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']
  
  - node_name: select_grid3
    inputs: [split3.train, split3.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: select_grid4
    inputs: [split4.train, split4.val]
    outputs: [fil_train, fil_val]
    operation: data_clean.feature_selector
    arguments:
      selected_features: ['days_to_final', 'days_from_introduction',
                          'number_dems', 'number_republicans', 'is_bipartisan', 'label']

  - node_name: model_grid1
    inputs: select_grid2.fil_train
    outputs: model_list
    operation: model.model_grid
    arguments:
      target: label
      models: [
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 10.0
            }
          },
      ]
      split: 1
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"

  - node_name: model_grid2
    inputs: select_grid2.fil_train
    outputs: model_list
    operation: model.model_grid
    arguments:
      target: label
      models: [
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 10.0
            }
          },
      ]
      split: 2
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
  
  - node_name: model_grid3
    inputs: select_grid3.fil_train
    outputs: model_list
    operation: model.model_grid
    arguments:
      target: label
      models: [
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 10.0
            }
          },
      ]
      split: 3
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
  
  - node_name: model_grid4
    inputs: select_grid4.fil_train
    outputs: model_list
    operation: model.model_grid
    arguments:
      target: label
      models: [
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l1', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'l2', 'C': 10.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 0.5
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 1.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 2.0
            }
          },
          {
            'model_name': 'sklearn.linear_model.LogisticRegression',
            'params': {
              'max_iter': 200, 'penalty': 'elasticnet', 'C': 10.0
            }
          },
      ]
      split: 4
      save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"
  
  # - node_name: metric_grid1
  #   inputs: [select_grid1.fil_val, model_grid1.model_list]
  #   outputs: precisions
  #   operation: evaluate.topk_metric_grid
  #   arguments:
  #     target: label
  #     threshold: 0.5
  
  # - node_name: metric_grid2
  #   inputs: [select_grid2.fil_val, model_grid2.model_list]
  #   outputs: precisions
  #   operation: evaluate.topk_metric_grid
  #   arguments:
  #     target: label
  #     threshold: 0.5
  
  # - node_name: metric_grid3
  #   inputs: [select_grid3.fil_val, model_grid3.model_list]
  #   outputs: precisions
  #   operation: evaluate.topk_metric_grid
  #   arguments:
  #     target: label
  #     threshold: 0.5

  # - node_name: metric_grid4
  #   inputs: [select_grid4.fil_val, model_grid4.model_list]
  #   outputs: precisions
  #   operation: evaluate.topk_metric_grid
  #   arguments:
  #     target: label
  #     threshold: 0.5

  - node_name: metric_grid
    inputs: [select_grid1.fil_val, select_grid2.fil_val, select_grid3.fil_val, select_grid4.fil_val, model_grid4.model_list]
    outputs: result_grid
    operation: evaluate.topk_metric_grid
    arguments:
        target: label
        threshold: 0.5
        save_path: "/data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/"

  # - node_name: plot_grid
  #   inputs: [metric_grid1.precisions, metric_grid2.precisions, metric_grid3.precisions, metric_grid4.precisions, model_grid4.model_list]
  #   outputs: result_grid
  #   operation: evaluate.plot_grid

  - node_name: validate3
    inputs: [select3.fil_val, model_logistic_regression3.model]
    outputs: val_output
    operation: evaluate.predict_val
    arguments:
      target: label
      threshold: 0.5

  - node_name: topk_model3
    inputs: validate3.val_output
    outputs: [metrics_lr_model3, model_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      threshold: 0.5
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/lr_model3.png

  - node_name: topk_baserate3
    inputs: baseline3.baserate
    outputs: [metrics_base3, base_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      threshold: 0.5
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/base3.png

  - node_name: topk_commonsense3
    inputs: baseline3.commonsense
    outputs: [metrics_commonsense3, commonsense_preds]
    operation: evaluate.topk_metric
    arguments:
      target: label
      threshold: 0.5
      graph_loc: /data/groups/bills3/vrenduch/DAGGIT_HOME/daggit_storage/skeleton2/commonsense3.png
